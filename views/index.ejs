<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Services Checkout</title>

  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/styles.css">
  <meta name="csrf-token" content="<%= csrfToken %>" />

  <!-- All CSP headers are now set via Helmet middleware on the server -->
  <script nonce="<%= nonce %>">
    // Fetch service prices and update the DOM
    async function fetchServicePrices() {
      try {
        const response = await fetch("/api/services");
        const services = await response.json();

        services.forEach(service => {
          const priceElement = document.querySelector(`#price-${service.id}`);
          if (priceElement) {
            priceElement.textContent = `Price: $${service.price}`;
          }
        });
      } catch (error) {
        console.error("Error fetching service prices:", error);
      }
    }

    document.addEventListener("DOMContentLoaded", fetchServicePrices);

    // Dynamically load the PayPal SDK based on our config endpoint
    async function loadPayPalSDK() {
      try {
        const response = await fetch("/config/paypal");
        const data = await response.json();
        if (!data.clientId) throw new Error("Missing PayPal Client ID");

        const script = document.createElement("script");
        script.src = `https://www.paypal.com/sdk/js?client-id=${data.clientId}&currency=USD`;
        script.onload = () => console.log("âœ… PayPal SDK Loaded");
        document.head.appendChild(script);
      } catch (error) {
        console.error("Error loading PayPal SDK:", error);
      }
    }

    loadPayPalSDK();

    // Validate that the selected service is valid
    async function validateService(serviceName) {
     
  try {
    const response = await fetch("/api/validate-service", {
      method: "POST",
      headers: { 
        "Content-Type": "application/json",
        "x-csrf-token": document.querySelector('meta[name="csrf-token"]').getAttribute("content")
      },
      body: JSON.stringify({ name: serviceName })
    });

    if (!response.ok) throw new Error("Invalid service selection");

    return await response.json();
  } catch (error) {
    console.error("Error validating service:", error);
    alert("Invalid service selection. Please refresh the page.");
    return null;
  }
}


    // Attach click event handlers to buy buttons
    function attachBuyButtonHandlers() {
      document.querySelectorAll(".buy-btn").forEach(button => {
        button.addEventListener("click", async function () {
          const serviceName = this.getAttribute("data-service");
          const validService = await validateService(serviceName);

          if (!validService) return;

          // Find the closest service card and its PayPal container
          const serviceCard = this.closest(".service-card");
          const container = serviceCard.querySelector(".paypal-button-container");

          // Hide any other visible PayPal containers if needed
          document.querySelectorAll(".paypal-button-container").forEach(el => el.style.display = "none");

          container.style.display = "block";
          renderPayPalButton(validService, container);
        });
      });
    }

    // Render the PayPal button for the given service
    function renderPayPalButton(service, container) {
      // Clear any existing content in the container
      container.innerHTML = "";

      paypal.Buttons({
        createOrder: async function (data, actions) {
          return actions.order.create({
            purchase_units: [{
              amount: { currency_code: "USD", value: service.price },
              description: service.name
            }]
          });
        },
        onApprove: function (data, actions) {
          return actions.order.capture().then(function (details) {
            alert("Transaction successful! " + details.payer.name.given_name);

            const transactionData = {
              transaction_id: details.id,
              payer_name: details.payer.name.given_name,
              payer_email: details.payer.email_address,
              amount: service.price,
              currency: "USD",
              payment_status: details.status,
              service_type: service.name
            };

            fetch("/save-transaction", {
  method: "POST",
  headers: { 
    "Content-Type": "application/json",
    "x-csrf-token": document.querySelector('meta[name="csrf-token"]').getAttribute("content")
  },
  body: JSON.stringify(transactionData)
})
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      alert("Transaction saved in the database!");
    } else {
      alert("Transaction successful, but error saving.");
    }
  })
  .catch(err => console.error("Error saving transaction:", err));

            // Hide the button container after the transaction
            container.style.display = "none";
          });
        }
      }).render(container);
    }

    document.addEventListener("DOMContentLoaded", attachBuyButtonHandlers);
  </script>
</head>
<body>
  <h2>Select a Service</h2>
  <div class="services-container">
    <div class="service-card" data-name="Basic Service" data-price="10">
      <h3>Basic Service</h3>
      <p id="price-1">Price: $100</p>
      <button class="buy-btn" data-service="Basic Service">Buy Now</button>
      <div class="paypal-button-container" id="paypal-button-container-basic" style="display: none;"></div>
    </div>
    <div class="service-card" data-name="Premium Service" data-price="20">
      <h3>Premium Service</h3>
      <p id="price-2">Price: $200</p>
      <button class="buy-btn" data-service="Premium Service">Buy Now</button>
      <div class="paypal-button-container" id="paypal-button-container-premium" style="display: none;"></div>
    </div>
    <div class="service-card" data-name="Enterprise Service" data-price="300">
      <h3>Enterprise Service</h3>
      <p id="price-3">Price: $300</p>
      <button class="buy-btn" data-service="Enterprise Service">Buy Now</button>
      <div class="paypal-button-container" id="paypal-button-container-enterprise" style="display: none;"></div>
    </div>
  </div>
  <div class="paypal-container">
    <!-- Optional global container if needed -->
    <!-- <div id="paypal-button-container"></div> -->
  </div>
</body>
</html>
